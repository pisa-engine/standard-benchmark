var N=null,E="",T="t",U="u",searchIndex={};
var R=["stdbench","process","config","result","executor","option","error","Returns true if the trait object wraps an object of type…","downcast","Returns a boxed object from a boxed trait object if the…","downcast_ref","Returns a reference to the object within the trait object…","downcast_mut","Returns a mutable reference to the object within the trait…","to_string","try_from","borrow_mut","try_into","into_any","as_any_mut","stdbench::config","type_id","stdbench::executor","borrow","typeid","as_any","command","collectionconfig","gitsource","dockersource","gitpisaexecutor","systempathexecutor","formatter","CollectionConfig","GitSource","PisaSource","PisaExecutor","SystemPathExecutor","GitPisaExecutor","DockerSource","standard_benchmark"];
searchIndex[R[40]]={"doc":E,"i":[[5,"app",R[40],E,N,[[],["app"]]],[5,"exit_gracefully",E,"Prints out the error with the logger and exits the…",N,[[["e"]],["r"]]],[14,"must_succeed",E,E,N,N]],"p":[]};
searchIndex[R[0]]={"doc":E,"i":[[3,"Error",R[0],E,N,N],[12,"0",E,E,0,N],[4,"Stage",E,"Available stages of the experiment. # Examples",N,N],[13,"Compile",E,E,1,N],[13,"BuildIndex",E,E,1,N],[13,"ParseCollection",E,E,1,N],[5,"printed",E,"Prints the passed command and returns it back.",N,[[[R[1]]],[R[1]]]],[0,R[2],E,E,N,N],[3,R[33],R[20],"Configuration of a tested collection.",N,N],[12,"name",E,E,2,N],[12,"description",E,E,2,N],[12,"collection_dir",E,E,2,N],[12,"forward_index",E,E,2,N],[12,"inverted_index",E,E,2,N],[3,"Config",E,"Stores a full config for benchmark run.",N,N],[12,"workdir",E,E,3,N],[12,"source",E,E,3,N],[12,"collections",E,E,3,N],[11,"from_yaml",E,"Constructs a collection config from a YAML object.",2,[[["yaml"]],[R[3],[R[27],R[6]]]]],[11,"new",E,E,3,[[["p"],["box",["pisasource"]]],[R[2]]]],[11,"from_file",E,"Load a config from a YAML file.",3,[[["p"]],[R[3],[R[2],R[6]]]]],[11,"suppress_stage",E,"Adds a stage to be suppressed during experiment.",3,[[["self"],["stage"]]]],[11,"is_suppressed",E,"Returns `true` if the given stage was suppressed in the…",3,[[["self"],["stage"]],["bool"]]],[0,R[4],R[0],E,N,N],[3,R[34],R[22],E,N,N],[12,"url",E,E,4,N],[12,"branch",E,E,4,N],[3,R[39],E,E,N,N],[3,R[37],E,"This executor simply executes the commands as passed, as…",N,N],[3,R[38],E,"An executor using compiled code from git repository.",N,N],[8,R[35],E,E,N,N],[10,R[4],E,E,5,[[["self"],[R[2]]],[R[3],["box",R[6]]]]],[8,R[36],E,"Implementations of this trait execute PISA tools.",N,N],[10,R[26],E,"Builds a process object for a program with given arguments.",6,N],[11,"is",E,R[7],5,[[["self"]],["bool"]]],[11,R[8],E,R[9],5,[[["box"]],[R[3],["box","box"]]]],[11,R[10],E,R[11],5,[[["self"]],[R[5]]]],[11,R[12],E,R[13],5,[[["self"]],[R[5]]]],[11,"parse",E,"Constructs `PisaSource` object from a YAML object.",5,[[["yaml"]],[R[3],["box",R[6]]]]],[11,"new",E,E,4,[[["str"],["str"]],[R[28]]]],[11,"is",E,R[7],6,[[["self"]],["bool"]]],[11,R[8],E,R[9],6,[[["box"]],[R[3],["box","box"]]]],[11,R[10],E,R[11],6,[[["self"]],[R[5]]]],[11,R[12],E,R[13],6,[[["self"]],[R[5]]]],[11,"new",E,E,7,[[],[R[31]]]],[11,"new",E,E,8,[[["p"]],[R[3],[R[30],R[6]]]]],[11,"new",R[0],E,0,[[["str"]],[R[6]]]],[11,"from_name",E,"Parse string and return a stage enum if string correct.",1,[[["str"]],[R[5],["stage"]]]],[14,"execute",E,E,N,N],[11,R[14],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[15],E,E,0,[[[U]],[R[3]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"]],[R[24]]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[3]]]],[11,R[18],E,E,0,[[["box"]],["box",["any"]]]],[11,R[25],E,E,0,[[["self"]],["any"]]],[11,R[19],E,E,0,[[["self"]],["any"]]],[11,R[14],E,E,1,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[15],E,E,1,[[[U]],[R[3]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"]],[R[24]]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[3]]]],[11,R[18],E,E,1,[[["box"]],["box",["any"]]]],[11,R[25],E,E,1,[[["self"]],["any"]]],[11,R[19],E,E,1,[[["self"]],["any"]]],[11,"from",R[20],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[15],E,E,2,[[[U]],[R[3]]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"]],[R[24]]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[3]]]],[11,R[18],E,E,2,[[["box"]],["box",["any"]]]],[11,R[25],E,E,2,[[["self"]],["any"]]],[11,R[19],E,E,2,[[["self"]],["any"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[15],E,E,3,[[[U]],[R[3]]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[R[24]]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[3]]]],[11,R[18],E,E,3,[[["box"]],["box",["any"]]]],[11,R[25],E,E,3,[[["self"]],["any"]]],[11,R[19],E,E,3,[[["self"]],["any"]]],[11,"from",R[22],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[15],E,E,4,[[[U]],[R[3]]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[R[24]]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[3]]]],[11,R[18],E,E,4,[[["box"]],["box",["any"]]]],[11,R[25],E,E,4,[[["self"]],["any"]]],[11,R[19],E,E,4,[[["self"]],["any"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[15],E,E,9,[[[U]],[R[3]]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[21],E,E,9,[[["self"]],[R[24]]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[R[3]]]],[11,R[18],E,E,9,[[["box"]],["box",["any"]]]],[11,R[25],E,E,9,[[["self"]],["any"]]],[11,R[19],E,E,9,[[["self"]],["any"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[15],E,E,7,[[[U]],[R[3]]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[21],E,E,7,[[["self"]],[R[24]]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[R[3]]]],[11,R[18],E,E,7,[[["box"]],["box",["any"]]]],[11,R[25],E,E,7,[[["self"]],["any"]]],[11,R[19],E,E,7,[[["self"]],["any"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[15],E,E,8,[[[U]],[R[3]]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[R[24]]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[R[3]]]],[11,R[18],E,E,8,[[["box"]],["box",["any"]]]],[11,R[25],E,E,8,[[["self"]],["any"]]],[11,R[19],E,E,8,[[["self"]],["any"]]],[11,R[4],E,E,4,[[["self"],[R[2]]],[R[3],["box",R[6]]]]],[11,R[4],E,E,9,[[["self"],[R[2]]],[R[3],["box",R[6]]]]],[11,R[26],E,E,7,N],[11,R[26],E,E,8,N],[11,"eq",R[20],E,2,[[["self"],[R[27]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[27]]],["bool"]]],[11,"eq",R[22],E,4,[[["self"],[R[28]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[28]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[29]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[29]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[30]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[30]]],["bool"]]],[11,"eq",R[0],E,0,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["stage"]],["bool"]]],[11,"default",R[22],E,7,[[],[R[31]]]],[11,"from",R[0],E,0,[[[R[6]]],["self"]]],[11,"fmt",E,E,0,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,1,[[["self"],[R[32]]],[R[3]]]],[11,"hash",E,E,1,N],[11,"fmt",R[20],E,2,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",R[22],E,4,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,9,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,7,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,8,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",R[0],E,0,[[["self"],[R[32]]],[R[3]]]],[11,"fmt",E,E,1,[[["self"],[R[32]]],[R[3]]]]],"p":[[3,"Error"],[4,"Stage"],[3,R[33]],[3,"Config"],[3,R[34]],[8,R[35]],[8,R[36]],[3,R[37]],[3,R[38]],[3,R[39]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);